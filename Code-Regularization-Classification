import numpy as np
import matplotlib.pyplot as plt
from klearn.datasets import make_moons
import seaborn as sns
from mlxtend.plotting import plot_decision_regions

import tensorflow
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout
from tensorflow.keras.optimizers import Adam

X,y=make_moons(100,noise=0.25,random_state=2)

import matplotlib.pyplot as plt
plt.scatter(X[:,0],X[:,1],c=y)
plt.show()

model1=Sequential()

model1.add(Dense(128,input_dim=2,activation="relu"))
model1.add(Dense(128,activation="relu"))
model1.add(Dense(1,activation='sigmoid'))

model1.summary()

adam=Adam(learning_rate=0.01)
model1.compile(loss='binary_crossentropy',optimizer=adam,metrices=['accuracy'])

history1=model1.fit(X,y,epochs=2000,validation_split=0.2,verbose=0)

plot_decision_regions(X,y.astype('int'),clf=model1,legend=2)
plt.xlim(-2,3)
plt.ylim(-1.5,2)
plt.show()

plt.plot(history1.history['loss'])
plt.plot(history1.history['val_loss'])
















#Reducing Overfitting

model2=Sequential()

model2.add(Dense(128,input_dim=2,activation="relu",kernel_regularizer=tensorflow.keras.regularizers.l2(0.03)))
model2.add(Dense(128,activation="relu",kernel_regularizer=tensorflow.keras.regularizers.l2(0.03)))
model2.add(Dense(1,activation='sigmoid'))

model2.summary()


adam=Adam(learning_rate=0.01)
model1.compile(loss='binary_crossentropy',optimizer=adam,metrices=['accuracy'])

history1=model1.fit(X,y,epochs=2000,validation_split=0.2,verbose=0)

plot_decision_regions(X,y.astype('int'),clf=model1,legend=2)
plt.xlim(-2,3)
plt.ylim(-1.5,2)
plt.show()

plt.plot(history1.history['loss'])
plt.plot(history1.history['val_loss'])








#Further explanation

model1_weight_layer1 = model1.get_weights()[0].reshape(256)
model2_weight_layer1 = model2.get_weights()[0].reshape(256)

sns.boxplot(model1_weight_layer1)

sns.boxplot(model2_weight_layer1)

model1_weight_layer1.min()

model2_weight_layer1.min()

sns.distplot(model1_weight_layer1)
sns.distplot(model2_weight_layer1)

model1.get_weights()[0].reshape(256)


#for l1 regularization,replace l2 by l1 in model2 formation
